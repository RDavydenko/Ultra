CREATE SCHEMA IF NOT EXISTS ult_auth;

CREATE TABLE IF NOT EXISTS ult_auth."USER" (
  "ID"                INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  "LOGIN"             VARCHAR(32)  NOT NULL UNIQUE,
  "USER_NAME"         VARCHAR(128) NOT NULL,
  "PASSWORD_HASH"     VARCHAR(64)  NOT NULL,
  "SALT"              VARCHAR(32)  NOT NULL,
  "STATE"             VARCHAR(32)  NOT NULL DEFAULT 'ACTIVE'
);

CREATE TABLE IF NOT EXISTS ult_auth."ROLE" (
  "ID"                INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  "CODE"              VARCHAR(32) NOT NULL UNIQUE,
  "NAME"              VARCHAR(64) NOT NULL,
  "DESCRIPTION"       VARCHAR(256)    NULL,
  "STATE"             VARCHAR(32) NOT NULL DEFAULT 'ACTIVE'
);

CREATE TABLE IF NOT EXISTS ult_auth."USER_ROLE" (
  "USER_ID"           INTEGER     NOT NULL REFERENCES ult_auth."USER"("ID"),
  "ROLE_ID"           INTEGER     NOT NULL REFERENCES ult_auth."ROLE"("ID"),
  PRIMARY KEY ("USER_ID", "ROLE_ID")
);

CREATE TABLE IF NOT EXISTS ult_auth."PERMISSION" (
  "ID"                INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  "ENTITY"            VARCHAR(32) NOT NULL,
  "ACTION"            VARCHAR(32) NOT NULL,
  "DESCRIPTION"       VARCHAR(256)    NULL,
  "STATE"             VARCHAR(32) NOT NULL DEFAULT 'ACTIVE',
  UNIQUE ("ENTITY", "ACTION")
);

CREATE TABLE IF NOT EXISTS ult_auth."ROLE_PERMISSION" (
  "PERMISSION_ID"     INTEGER     NOT NULL REFERENCES ult_auth."PERMISSION"("ID"),
  "ROLE_ID"           INTEGER     NOT NULL REFERENCES ult_auth."ROLE"("ID"),
  PRIMARY KEY ("PERMISSION_ID", "ROLE_ID")
);

CREATE TABLE IF NOT EXISTS ult_auth."ENTITY_ACCESS" (
  "ID"                INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  "ENTITY"            VARCHAR(256)  NOT NULL,
  "ENTITY_ID"         INTEGER           NULL,
  "METHOD"            VARCHAR(32)   NOT NULL CHECK("METHOD" IN ('Read', 'Create', 'Update', 'Delete')),
  "TYPE"              VARCHAR(1)    NOT NULL DEFAULT 'W' CHECK("TYPE" IN ('W', 'B')),
  "USER_ID"           INTEGER           NULL REFERENCES ult_auth."USER"("ID"),
  "ROLE_ID"           INTEGER           NULL REFERENCES ult_auth."ROLE"("ID"),
  CONSTRAINT ENTITY_ACCESS_USER_ID_ROLE_ID_CHECK check("USER_ID" IS NOT NULL OR "ROLE_ID" IS NOT NULL)
);